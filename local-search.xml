<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3NF范式</title>
    <link href="/2021/07/14/3NF%E8%8C%83%E5%BC%8F/"/>
    <url>/2021/07/14/3NF%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h5 id="NF是normal-form，是数据库设计的原则。"><a href="#NF是normal-form，是数据库设计的原则。" class="headerlink" title="NF是normal form，是数据库设计的原则。"></a>NF是normal form，是数据库设计的原则。</h5><h4 id="1、1NF"><a href="#1、1NF" class="headerlink" title="1、1NF"></a>1、1NF</h4><h5 id="要求每个字段都是原子不可分的。"><a href="#要求每个字段都是原子不可分的。" class="headerlink" title="要求每个字段都是原子不可分的。"></a>要求每个字段都是原子不可分的。</h5><p>假如学校要建立一个所有学生信息的数据库，有一个字段是学生的家庭住址。</p><p>字段如下：<br>中国湖南省邵阳市隆回县顺子镇王炸村1号。</p><p>这个字段可以切割成4个字段：</p><p>国籍，省份，市，具体地址</p><h4 id="2、2NF"><a href="#2、2NF" class="headerlink" title="2、2NF"></a>2、2NF</h4><h5 id="要求每张表都要有一个主键，其它记录完全依赖主键。"><a href="#要求每张表都要有一个主键，其它记录完全依赖主键。" class="headerlink" title="要求每张表都要有一个主键，其它记录完全依赖主键。"></a>要求每张表都要有一个主键，其它记录完全依赖主键。</h5><p>例如，如果花名册里只有名字，没有学号，则重名的话会很麻烦。</p><h4 id="3、3NF"><a href="#3、3NF" class="headerlink" title="3、3NF"></a>3、3NF</h4><h5 id="所有字段只能依赖主键，不得依赖于其它字段。消除依赖传递。"><a href="#所有字段只能依赖主键，不得依赖于其它字段。消除依赖传递。" class="headerlink" title="所有字段只能依赖主键，不得依赖于其它字段。消除依赖传递。"></a>所有字段只能依赖主键，不得依赖于其它字段。消除依赖传递。</h5><p>例如，如下表：</p><p><img src="/img/3nf1.png"></p><p>姓名、地址和电话都依赖于旺旺，而旺旺依赖于订单号、商品号。</p><p>解决办法：分割成两张表。</p><p><img src="/img/3nf2.png"></p><h2 id="后期补充"><a href="#后期补充" class="headerlink" title="后期补充"></a>后期补充</h2><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，<strong>越高的范式数据库冗余越小</strong>。</p><p>目前<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93">关系数据库</a>有六种范式：<strong>第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、<a href="https://baike.baidu.com/item/%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F">第四范式</a>(4NF）和<a href="https://baike.baidu.com/item/%E7%AC%AC%E4%BA%94%E8%8C%83%E5%BC%8F">第五范式</a>（5NF，又称完美范式）</strong>。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。<strong>一般来说，数据库只需满足第三范式(3NF）就行了</strong>。</p><p><strong>第一范式（1NF）：强调数据表的原子性</strong></p><p>所谓第一范式（1NF）是指在<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B">关系模型</a>中，对于添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。</p><p><strong>第二范式（2NF）：在1NF基础上，消除了非主属性对于码的部分函数依赖</strong></p><p>（sno, pno）-&gt;sname   sno-&gt;sname  pno-&gt;sname   =&gt;sname部分函数依赖于（sno, pno）</p><p>在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><p>第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。</p><p><strong>第三范式（3NF）：在2NF的基础上，消除了非主属性对于码的传递函数依赖</strong></p><p>在2NF基础上，任何非主<a href="https://baike.baidu.com/item/%E5%B1%9E%E6%80%A7">属性</a>不依赖于其它非主属性（在2NF基础上消除传递依赖）</p><p><strong>巴斯-科德范式（BCNF）：在3NF的基础上，消除了主属性对于码的部分函数依赖和传递函数依赖</strong></p><p>Boyce-Codd Normal Form（巴斯-科德范式）</p><p>在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖）</p><p><em>通俗解释：</em></p><p>第一范式（1NF）：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</p><p> <img src="/img/3nf3.png"></p><p>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</p><p> <img src="/img/3nf4.png"></p><p>第三范式（3NF）：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</p><p> <img src="/img/3nf5.png"></p><p><em>ER图：</em></p><p>一、那么什么是E-R模型？</p><p>　E-R模型即实体-联系模型，E-R模型的提出基于这样一种认识，数据库总是存储现实世界中有意义的数据，而现实世界是由一组实体和实体的联系组，E-R模型可以成功描述数据库所存储的数据。</p><p>二、为什么要设计E-R模型？</p><p>　设计E-R模型能够更有效和更好的模拟现实世界。</p><p>三、E-R模型的基本要素</p><ol><li>实体 ：实体是E-R模型的基本对象，是现实世界中各种事物的抽象，凡是可以相互区别，并可以被识别的事、物概念等均可认为是实体。在一个单位中，具有共性的一类实体可以划分为一个实体集，例如，学生李明，黄颖等都是实体，为了便于描述，可以定义学生这样的一个实体集，所有学生都是这个集合的成员。</li></ol><p>2)属性：每个实体都具有各种特征，称其为实体的属性，如学生有学号，姓名，年龄等属性。实体的属性值是数据库存储的主要数据。能唯一标识实体的属性或属性组称为实体键，如一个实体有多个键存在。则可从中选取一个作为主键。</p><p>3)联系：实体间会存在各种关系，如人与人之间可能存在领导与雇员关系等，实体间的关系被抽象为联系。</p><p>四、E-R图的四个组成的部分</p><p>矩形框:表示实体，在矩形框中写上实体的名字</p><p>椭圆形框:表示实体或联系的属性</p><p>菱形框:表示联系，在框中记入联系名</p><p>连线:实体与属性之间；实体与联系之间；联系与属性之间用直线相连，（对于一对一联系，要在两个实体连线方向各写1； 对于一对多联系，要在一的一方写1，多的一方写N；对于多对多关系，则要在两个实体连线方向各写N,M。)。</p><p><img src="/img/3nf6.png"> </p>]]></content>
    
    
    <categories>
      
      <category>数据库基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>面试，数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java面向对象</title>
    <link href="/2021/07/14/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/07/14/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="面向对象是什么"><a href="#面向对象是什么" class="headerlink" title="面向对象是什么"></a>面向对象是什么</h3><p>​        面向对象简称 OO（Object Oriented），20 世纪 80 年代以后，有了面向对象分析（OOA）、 面向对象设计（OOD）、面向对象程序设计（OOP）等新的系统开发方式模型的研究。</p><p>​        Java 是面向对象的编程语言，对象就是面向对象程序设计的核心。<strong>所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念</strong>。对象有以下特点：</p><ul><li>对象具有属性和行为。</li><li>对象具有变化的状态。</li><li>对象具有唯一性。</li><li>对象都是某个类别的实例。</li><li> 一切皆为对象，真实世界中的所有事物都可以视为对象。</li></ul><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><p>面向过程：面向过程是一种以事件为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数。</p><h5 id="优缺点比较"><a href="#优缺点比较" class="headerlink" title="优缺点比较"></a>优缺点比较</h5><h6 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h6><p>优点：</p><p>流程化使得编程任务明确，在开发之前基本考虑了实现方式和最终结果，具体步骤清楚，便于节点分析。</p><p>效率高，面向过程强调代码的短小精悍，善于结合数据结构来开发高效率的程序。</p><p>缺点：</p><p>需要深入的思考，耗费精力，代码重用性低，扩展能力差，后期维护难度比较大。</p><h6 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h6><p>优点:</p><p>结构清晰，程序是模块化和结构化，更加符合人类的思维方式；</p><p>易扩展，代码重用率高，可继承，可覆盖，可以设计出低耦合的系统；</p><p>易维护，系统低耦合的特点有利于减少程序的后期维护工作量。</p><p>缺点：</p><p>开销大，当要修改对象内部时，对象的属性不允许外部直接存取，所以要增加许多没有其他意义、只负责读或写的行为。这会为编程工作增加负担，增加运行开销，并且使程序显得臃肿。</p><p>性能低，由于面向更高的逻辑抽象层，使得面向对象在实现的时候，不得不做出性能上面的牺牲，计算时间和空间存储大小都开销很大。</p><h2 id="java面向对象的核心特性"><a href="#java面向对象的核心特性" class="headerlink" title="java面向对象的核心特性"></a>java面向对象的核心特性</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封转是指属性私有化</p><ul><li>根据需要提供setter和getter方法来访问属性</li><li>隐藏具体属性和实现细节，仅对外开放接口</li><li>控制程序中属性的访问级别</li></ul><p><strong>目的</strong>：增强数据安全性，不能让其他用户随意访问和修改数据，简化编程，使用者不必在意具体实现细节，而只是通过外部接口即可访问类的成员</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是指将多个相同的属性和方法提取出来，新建一个父类</p><ul><li>java中一个类只能继承一个父类，且只能继承访问权限非private属性和方法</li><li>子类可以重写父类中的方法，命名与父类中同名的属性</li></ul><p><strong>目的</strong>：代码复用 </p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态（Polymiorph）可以分为两种：设计时多态、运行时多态</p><p>设计（编译）时多态：即重载（Overload），是指java允许方法名相同而参数不同（返回值可以相同也可以不同），同一个类中允许存在一个或多个以上的同名函数，只要参数类型或参数个数不同即可</p><p>运行时多态：即重写（Override）必须是在继承体系中，子类重写父类方法，JVM运行时根据调用该方法的类型决定调用那个方法</p><p>目的：增加代码的灵活度</p><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><h4 id="抽象的定义"><a href="#抽象的定义" class="headerlink" title="抽象的定义"></a>抽象的定义</h4><p>抽象是把多个事物的共性的内容抽取出来，本质就是把我们关注的内容抽取出来。（比如：宝马、奔驰都属于汽车，汽车是我们抽象出的概念）</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>java中可以定义没有方法体的方法，该方法由其子类具体的实现，该没有方法体的方法我们称之为抽象方法，含有抽象方法的类我们称之为抽象类</p><h4 id="抽象方法特点"><a href="#抽象方法特点" class="headerlink" title="抽象方法特点"></a>抽象方法特点</h4><p>只有方法的头没有方法体<br>抽象方法用abstract来修饰<br>抽象方法代表一种不确定的操作或行为<br>抽象方法不能被调用</p><h4 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h4><p>定义中含有抽象方法的类叫抽象类<br>抽象类用abstract来修饰<br>抽象类代表一种抽象的对象类型<br>抽象类不能实例化<br>抽象类中可以由具体方法，可以没有抽象方法</p><h2 id="java访问控制符作用范围表："><a href="#java访问控制符作用范围表：" class="headerlink" title="java访问控制符作用范围表："></a>java访问控制符作用范围表：</h2><table><thead><tr><th>本类</th><th>本包</th><th>子类</th><th>外部包</th><th></th></tr></thead><tbody><tr><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td>X</td></tr><tr><td>default</td><td>✓</td><td>✓</td><td>X</td><td>X</td></tr><tr><td>private</td><td>✓</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><h2 id="java面向对象的五大原则"><a href="#java面向对象的五大原则" class="headerlink" title="java面向对象的五大原则"></a>java面向对象的五大原则</h2><p>单一职责原则：一个类，最好只做一件事，只有一个引起它变化。每个类应该实现单一的职责，如果不是，那就把类拆分</p><p>开放封闭原则：对扩展开放，对修改封闭</p><p>里氏替换原则：子类必须能够替换其基类，里氏替换原则中说，任何基类可以出现的地方，子类一定可以出现</p><p>依赖倒置原则：依赖于抽象接口，不要依赖于具体实现，简单来说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户于与实现模块间的耦合</p><p>接口隔离原则：使用多个小的专门接口，而不是使用一个大的接口</p>]]></content>
    
    
    <categories>
      
      <category>java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/14/hello-world/"/>
    <url>/2021/07/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>hello world</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hello</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
